
  <style>
table {
  font-size: 16px;
}

div.numer {
  border-bottom:1px solid;
  text-align:center;
  font-size: 0.8em;
}

div.denom {
  font-size: 0.8em;
  border-top: 1px solid;
  text-align: center;
}
</style>

# Induction

## Structural Induction

<br><br>

###Proof Structure

Sometimes you want to prove a property holds for everything in a recursive definition, like on lists, trees, well-formed formulas, etc.
<br>A very handy tool is Structural Induction- a proof method used often used in Computer Science.
<br>Essentially, we prove that the property holds for all the smallest structures and that if it holds for structure S, then it must hold also for anything we can build from S.
<br>You can think of this as doing induction on the number of steps done in a derivation of elements of the set S.

The proof scheme looks like the following:

+ 0) Identify the structure.
  * What is the induction on?
+ 1) Identify the property.
  * What are you trying to prove for each instance of that structure?
+ 2) Base case: __One for each item in the Basis.__
+ 3) Inductive step: __One for each Recursion Step__.
	* Assume the inductive hypothesis:
      - That is, assume we have the instances of the structure needed in the requiremeents of that Recursion Step.
        + This is usually seen between the "if ... then" in the Recursive clause.
      - And, assume the property holds for each of these instances.
	* Make the inductive argument that the new instance of the structure type is created from the Recursion Step holds.
      - The new instance of that structure type can usually be seen after the "then" in the Recursive clause.
+ 4) Conclude that the property holds for all instances of that structure.



###Example: Simple Prop Wffs

Recall the definiton for simple propositional wffs.

Let the set of simple propositional wffs be recursively defined as follows:
<br> $~~~~$ 1) P, where P is __any__ proposition symbol, is a simple propositional wff.
<br> $~~~~$ 2) If α is a simple propositional wff, then so is (¬α).
<br> $~~~~$ 3) If α and β are both simple propositional wffs, then so is (α ∧ β).
<br> $~~~~$ 4) If α and β are both simple propositional wffs, then so is (α ∨ β).

Let $L_\alpha$ be the number of left parenthesis in α.
Let $R_\alpha$ be the number of right parenthesis in α.

Prove by structural induction that for every simple propositional wff α, $L_\alpha$ = $R_\alpha$.

0) __Identify the Structure__: The structure is the simple propositional wffs.

1) __Identify the Property__:
<br>Let the Property P(α) be $L_\alpha$ = $R_\alpha$.
<br>_Notice how the input for this predicate will be a simple propositional wff._

2) __Base Case:__ Let α be an arbitrary propositional symbol P. Prove P(α).
<br>_Notice how we chose an arbitrary propositional symbol. 
<br>This is because 1) in the definition says P is_ __any__ _propositional symbol._
<br>P has no left parentheses. It is just a propositional symbol which is a letter.
<br>P also has no right parentheses for the same reason.
<br>$L_\alpha$ = 0 = $R_\alpha$, as desired.
<br>As P was arbitrary, then P(α) holds where α is any propositional symbol.

3) __Inductive Step:__

+ 1. Let α be a simple propositional wff of the form (¬φ) where φ is a simple propositional wff.
	* Inductive Hypothesis (IH): Suppose P(φ) holds. Meaning $L_\varphi$ = $R_\varphi$.
	* Inductive Argument (IA): WTS P(α). That is we want to show $L_\alpha$ = $R_\alpha$.
		+ We do not know much about φ other than it is a simple propositional wff.
		+ φ could be an atomic wff, but it also could be a compound wff.
		+ We do know there is some number of left parenthesis and right parenthesis.
			* __BUT WE DO NOT KNOW THE PRECISE NUMBER!__
			* $L_\varphi$ is the number of left parenthesis in φ.
			* $R_\varphi$ is the number of right parenthesis in φ.
		+ When we construct α, we do it via rule 2) applied to φ to get (¬φ).
		+ Constructing (¬φ) adds three symbols: 1 ¬, 1 (, and 1 ).
		+ This means that $L_\alpha$ = $L_\varphi$ + 1.
			* The number of left parenthesis in α is the number of left parenthesis in φ + the 1 ( from the construction of α.
		+ Similarly, $R_\alpha$ = $R_\varphi$ + 1.
		+ We then get $L_\alpha$ = $L_\varphi$ + 1, by how many left parenthesis are in α.
		+ $~~~~~~~~~~~~~~~~~~~~~~~~~~~$ = $R_\varphi$ + 1, as $L_\varphi$=$R_\varphi$ by IH.
		+ $~~~~~~~~~~~~~~~~~~~~~~~~~~~$ = $R_\alpha$, by how many right parenthesis are in α.
		+ Therefore $L_\alpha$ = $R_\alpha$, as desired.	
+ 2. Let α be a simple propositional wff of the form (φ ∧ β) where φ, β are simple propositional wffs.
	* Inductive Hypothesis (IH): Suppose P(φ) and P(β) both hold. 
		+ Meaning $L_\varphi$ = $R_\varphi$ and $L_\beta$ = $R_\beta$.
	* Inductive Argument (IA): WTS P(α). That is we want to show $L_\alpha$ = $R_\alpha$.
		+ $L_\varphi$ is the number of left parenthesis in φ.
		+ $R_\varphi$ is the number of right parenthesis in φ.
		+ $L_\beta$ is the number of left parenthesis in β.
		+ $R_\beta$ is the number of right parenthesis in β.
		+ When we construct α, we do it via rule 3) applied to φ and β to get (φ ∧ β).
		+ Constructing (φ ∧ β) adds three symbols: 1 ∧, 1 (, and 1 ).
		+ This means that $L_\alpha$ = $L_\varphi$ + $L_\beta$ 1.
		+ Similarly, $R_\alpha$ = $R_\varphi$ + $R_\beta$ + 1.
		+ We then get $L_\alpha$ = $L_\varphi$ + $L_\beta$ + 1, by how many left parenthesis are in α.
		+ $~~~~~~~~~~~~~~~~~~~~~~~~~~~$ = $R_\varphi$ + $L_\beta$ + 1, as $L_\varphi$=$R_\varphi$ by IH.
		+ $~~~~~~~~~~~~~~~~~~~~~~~~~~~$ = $R_\varphi$ + $R_\beta$ + 1, as $L_\beta$=$R_\beta$ by IH.
		+ $~~~~~~~~~~~~~~~~~~~~~~~~~~~$ = $R_\alpha$, by how many right parenthesis are in α.
		+ Therefore $L_\alpha$ = $R_\alpha$, as desired.	
+ 3. Let α be a simple propositional wff of the form (φ ∨ β) where φ, β are simple propositional wffs.
	* __Left as an exercise__. It is similar to the previous case.

4) __Concluding Statement:__
<br>Thus by the principle of structural induction, every simple propositional wff has the same number of left parenthesis as right parenthesis.

_Note: If there is a "nothing else" clause, ignore it while doing your structural induction proof._

```{.QualitativeProblem .MultipleChoice options="check" submission="none" content-format="html"}
SimpleWff1. Select what is needed to prove the case left for case 3 which was left as an exercise.
| Only one simple propositional wff, φ.
| *Two simple propositional wffs, φ and β.
| P and Q, two propositional symbols.
```

```{.QualitativeProblem .MultipleChoice options="check" submission="none" content-format="html"}
SimpleWff2. Supposing φ was some simple propositional wff for case 3, how many left parenthesis does it have?
| 0
| 1
| 2
| *Some unknown number.
```

```{.QualitativeProblem .MultipleChoice options="check" submission="none" content-format="html"}
SimpleWff3. Supposing φ and β were some simple propositional wffs for case 3, how many left parenthesis are in (φ ∨ β)?
| 0
| 1
| 2
| The number of left parenthesis in φ, plus 1.
| The number of left parenthesis in β, plus 1.
| *The number of left parenthesis in φ, plus number of left parenthesis in β, plus 1.
```

#### Exercises:

1. Prove by structural induction that there always exists some integer k such that $L_\alpha$ + $R_\alpha$ = 2k for any simple propositional wff $\alpha$.

Let $C_\alpha$ be the number of connective symbols in $\alpha$.
<br> Let $P_\alpha$ be the number of occurrences of propositional symbols in $\alpha$.

2. Prove that it is not the case that for every simple propositional wff $\alpha$, $P_\alpha$ ≥ $C_\alpha$.

3. Prove by structural induction that it is the case that for every simple propositional wff $\alpha$, $C_\alpha$ ≥ $P_\alpha$-1.

<p>[Previous: Recurrence Relations](https://carnap.io/shared/smcintyre/book-induction-recrel.pandoc) &emsp; &emsp; &emsp; &emsp; [-Main Page-](https://carnap.io/assignments/COMP%201002%20-%20Spring%202022/Workbook.pandoc#part-iii-induction)   &emsp; &emsp; &emsp; &emsp;  [Next: Structural Induction Practice](https://carnap.io/shared/smcintyre/book-induction-prac2.pandoc) </p>
