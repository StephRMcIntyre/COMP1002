---
--from markdown+simple_tables
---

# First-Order Logic

## Universal Introduction/Generalization

∀xPx asserts that every object in the universe satisfies property P.
If we know that Pt holds for some _arbitrary_ element t, then we can conclude that ∀xPx.

We can think of ∀xPx as asserting a grand conjunction where we have P$t_1$∧P$t_2$∧P$t_3$∧… where $t_1,t_2,t_3$,.. are all of the objects in U. 
It is similar to ∧E in this regard, but instead of introducing ∧, it introduces ∀.
<br>Since proving for each would take too long, we can prove that it holds for some arbirary element which we know nothing about. 
<br>By arbitrary, we mean that the __chosen constant does not appear in any premises and/or assumptions in scope__.

+ Note: This phrasing fails* for infinite universes (like reasoning about numbers)
+ *The phrasing fails, but the proof rule remains sound.

To denote Universal Introduction in Carnap, we would write the justification ":AI m" where m is the line number we are referencing.

Exercise: Finish the proof below.

~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
1 Ax(Lcx /\ Lxc) :|-: Ax Lxc
|Ax(Lcx /\ Lxc) :PR
|Lca /\ Lac
|Lac 
|Ax Lxc
~~~

__Important note__ : When ∀xPxx is put through universal introduction, we must replace every constant with the same name we are quantifying with x.
<br>One could not turn Paa into ∀x∀yPyx or ∀xPax or ∀xPxa.
<br>Think about why this is not allowed.  

The proof below is incorrect. Correct and finish the proof.

~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
2 ∀xPxx, :|-: AxEy Pxy
|∀xPxx :PR
|Paa :∀E 1
|AxPax :AI 2
|AxEyPxy :EI 3
~~~


If we want to universally generalize a compound wff, we must apply it to the entire wff.


~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
3 ∀x(Lxb /\ Lcx) :|-: Ax (Lab /\ Ey Lyy)
|∀x(Lxb /\ Lcx) :PR
|
~~~


~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
4 AxAySxy :|-: Pa -> AxSax 
|AxAySxy :PR
|
~~~

Just like with existential introduction, we can introduce a universal quantifier to quantify nothing.

~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
5 AxSxa :|-: AxAyAxSxa 
|AxSxa :PR
~~~

For this next one, we will start with assuming Pbb. 
<br>If we can reach a contradiction in the subproof, then we can do ¬I to get ¬Pbb outside of the subproof.
<br>Once ¬Pbb is outside of the subproof, then b at that line will be an arbitrary constant.

~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
6 AxLx, Ax(Lx -> ~EyPxy) :|-: Ax~Pxx 
|AxLx :PR
|Ax(Lx -> ~EyPxy) :PR
| Pbb :AS
~~~

He's a tautology to prove. We will want to use a similar strategy as Q5.

~~~{.ProofChecker system="thomasBolducAndZachFOL" options="indent resize guides render tabindent fonts" init="now" submission="none" points=0}
7 :|-: Ax(Px \/ ~Px) 
~~~

<p>[Previous: Universal Elimination](https://carnap.io/shared/smcintyre/book-FOL-ND-ue.pandoc) &emsp; &emsp; &emsp; &emsp; [-Main Page-](https://carnap.io/shared/smcintyre/Workbook.pandoc#part-ii-first-order-logic)   &emsp; &emsp; &emsp; &emsp;  [Next: Existential Elimination](https://carnap.io/shared/smcintyre/book-FOL-ND-ee.pandoc) </p>
