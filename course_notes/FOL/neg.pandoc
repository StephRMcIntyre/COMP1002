---
--from markdown+simple_tables
---

# First-Order Logic

## Negating Statements

As said in PL, it is important to learn how to negate statements as __disproving a statement is proving its negation__.

When we negate a universal quantifier, we are no longer stating "all" and instead we are stating "not all".
<br> This is not to be confused with "none".
<br> If I said _I did not do all of my homework_, I am not saying I did none of the homework. 
I am just stating that there is some piece of homework that I did not do.
<br> If ∀xPx means _everything is a P_, then ¬∀xPx means _not everything is a P_ or in other words _something is not a P_.

When we negate an existential quantifier, we are no longer stating "some" and instead we are stating "not some".
<br> This is not to be confused with "not all".
<br> If I said _I did not do some of my homework_, I am stating that there is not a single piece of homework that I did- I did nothing.
<br> If ∃xPx means _something is a P_, then ¬∃xPx means _there is no object that is a P_ or in other words _nothing is a P_.

------------------------- -----------------------------
not ¬                     `-`, `~`
and ∧                     `/\`,  `&`
or ∨                      `\/`
if then →                 `->`, `>`
if and only if ↔          `<->`, `<>`
universal quantifier ∀    `A`, `@`
existential quantifier ∃  `E`, `3`
------------------------- -----------------------------

------------- ----------------------------------- ------------- --------------------------             
$Px~~$        $x$ is a professor.             
$Cx~~$        $x$ is a computer scientist.        $~~~~c~~$       Christine Paulin-Mohring
$Ixy~~$       $x$ was influenced by $y$.          
------------- ----------------------------------- ------------- --------------------------

<br> The universe will be every person currently alive.<br>

~~~{.Translate .FOL system="thomasBolducAndZachFOL"}
1 ~ExCx : No one is a computer scientist.
~~~

~~~{.Translate .FOL system="thomasBolducAndZachFOL"}
2 ~∀xPx : Not everyone is a professor.
~~~

~~~{.Translate .FOL system="thomasBolducAndZachFOL"}
3 ~Ex(Px/\Cx) : None of the professors are computer scientists.
~~~

### Negating Formulas

The main idea is to place the negation symbol infront of the statement, and push it inwards by using replacement rules. 

There are two new rules: negating ∀x$\alpha$ and negating ∃x$\alpha$.
<br> You can think of ∀ and ∃ as having a similar relationship like ∧ and ∨.
<br> ¬∀x$\alpha$ ⧦ ∃x¬$\alpha$. The negation pushes through the universal quantifier which flips for an existential.
<br> ¬∃x$\alpha$ ⧦ ∀x¬$\alpha$. And a similar thing happens when we negate an existential.

-------------------------------------------------------
-------------------------------------------------------

Replacement Rules
------------------------------- ---------------------------------------
Double Negation            `DN` 	$\neg \neg \alpha$ ⧦ $\alpha$
Conditional              `Cond` 	$\alpha\to\beta$⧦$\neg\alpha\lor\beta$
Biconditional Exchange `Bicond` 	$\alpha\leftrightarrow\beta$⧦$(\alpha\to\beta)\land(\beta\to\alpha)$
DeMorgan's Laws           `DeM` 	$\neg (\alpha\lor\beta )$⧦$\neg\alpha\land\neg\beta$
DeMorgan's Laws           `DeM` 	$\neg (\alpha\land\beta )$⧦$\neg\alpha\lor\neg\beta$
Quantifier Negation        `QN`   $\neg \forall x \alpha$⧦$\exists x\neg\alpha$
Quantifier Negation        `QN`   $\neg \exists x \alpha$⧦$\forall x\neg\alpha$
------------------------------- -------------------------------

-------------------------------------------------------
-------------------------------------------------------

<br>Showing that ¬∃x(Px ∧ Cx) ⧦ ∀x(Px → ¬Cx)
<br>¬∃x(Px ∧ Cx) ⧦ ∀x¬(Px ∧ Cx) :QN
<br> ⧦ ∀x(¬Px ∨ ¬Cx) :DeM
<br> ⧦ ∀x(Px → ¬Cx) :Cond


Negate and simplify ∃x∀yRxy.
<br> ¬∃x∀yRxy ⧦ ∀x¬∀yRxy :QN
<br> ⧦ ∀x∃y¬Rxy :QN

Negate and simplify ∀x∀y(Rxy → Ryy).
<br> ¬∀x∀y(Rxy → Ryy) ⧦ ∃x¬∀y(Rxy → Ryy) :QN
<br> ⧦ ∃x∃y¬(Rxy → Ryy) :QN
<br> ⧦ ∃x∃y¬(¬Rxy ∨ Ryy) :Cond
<br> ⧦ ∃x∃y(¬¬Rxy ∧ ¬Ryy) :DeM
<br> ⧦ ∃x∃y(Rxy ∧ ¬Ryy) :DN



Negate and simplify ∀x(Rxx → ∃y(Ryx ∧ ¬Qy)).

<p>[Previous: Quantifiers](https://carnap.io/shared/smcintyre/book-FOL-quant.pandoc) &emsp; &emsp; &emsp; &emsp; [-Main Page-](https://carnap.io/shared/smcintyre/Workbook.pandoc#part-ii-first-order-logic)   &emsp; &emsp; &emsp; &emsp;  [Next: Multiple Quantifiers](https://carnap.io/shared/smcintyre/book-FOL-multq.pandoc) </p>
