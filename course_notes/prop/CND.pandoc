---
--from markdown+simple_tables
---

# Propositional Logic

## The Semantics of Conjunction, Disjunction, and Negation

A truth-value assignment is a function that assigns a truth-value {T,F} to propositions.

We can summarize this truth-value assignment for conjunction by means of a truth table. A truth table exhibits all possible combinations of truth values for the sentence variables. The truth table must have $2^n$ rows where n is the number of sentence variables.

There are two ways of displaying truth-tables. The first one is to dedicate a column to every sub formula (every part of the parse tree). The second one has the resulting formula and you assign values based on the parts of the formula, which must be done in order of priority. Examples for both will be shown but only the second kind will be 
presented as exercises in this text. 

For both kinds of truth-tables, the propositional variables are listed first and their values are assigned, making sure that every possibility is accounted for. Then there is a vertical bar to separate the variables and the compound statements. It is recommended that you first draw the parse tree to ensure you know the priority. After you feel more comfortable with the priority, then you can omit this step. Priority from the tree can be obtained by going from the bottom up.

Example: Draw the parse tree for $\neg (P \lor Q) \lor R$.

~~~{.SynChecker .Match system="thomasBolducAndZachTFL2019" submission="none"} 
1.1 ~(P \/ Q) \/ R
~~~



```{.QualitativeProblem .MultipleChoice options="check" submission="none" content-format="html"}
1.2 After the propositional variables are given their assigned values, which sub formula would be evaluated next?
| ¬(P ∨ Q) ∨ R
| *P ∨ Q
| ¬(P ∨ Q) 
```


###Semantics: Negation

Let $\alpha$ be a sentence variable for any propositional statement.

__Truth-Value Assignment for Negations__

A negation $\neg\alpha$ is true if and only if $\alpha$ is false (F).


Example: $\neg$ R: It is not raining in St.John's.

The first kind of truth table.

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample  immutable nodash"}
2.1 ~R
|     F-
|     T-
```

The second kind of truth table.

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample  immutable nodash"}
2.2 ~R
|   FT
|   TF
```
Important note: Statements such as $\neg\neg$P are perfectly acceptable in PL.
Double negation is the logical opposite of negation, which asserts the original statement in an
equivalent form. 

Exercise: Construct the truth table for $\neg\neg$P, where P is a propositional variable.

~~~{.SynChecker .Match system="thomasBolducAndZachTFL2019" submission="none"} 
2.3 ~~P
~~~

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample nodash autoAtom"}
2.4 ~~P
```
###Semantics: Disjunction

Let $\alpha$, $\beta$ be sentence variables for any two propositional statements.

__Truth-Value Assignment for Disjunctions__

A disjunction $\alpha \lor \beta$ is true if and only if $\alpha$ is true (T) or $\beta$ is true (T).

Here, ‘or’ will be inclusive; meaning one or the other, or both.

Example: D $\lor$ F: It is drizzling or foggy in St.John's.

The first kind of truth table.

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample immutable nodash"}
3.1 P \/ Q
|     -T-
|     -T-
|     -T-
|     -F-
```

The second kind of truth table.

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample immutable nodash"}
3.2 P \/ Q
|    TTT
|    TTF
|    FTT
|    FFF
```

Exercise: Construct the truth table for $\neg P \lor Q$.

~~~{.SynChecker .Match system="thomasBolducAndZachTFL2019" submission="none"} 
3.3 ~P \/ Q
~~~

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample nodash autoAtom"}
3.4 ~P \/ Q
```

###Semantics: Conjunction

Let $\alpha$, $\beta$ be sentence variables for any two propositional statements.

__Truth-Value Assignment for Conjunctions__

A disjunction $\alpha \land \beta$ is true if and only if both $\alpha$ is true (T) and $\beta$ is true (T).


Example: D $\land$ F: It is drizzling and foggy in St.John's.

The first kind of truth table.

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample immutable nodash"}
4.1 P /\ Q
|     -T-
|     -F-
|     -F-
|     -F-
```

The second kind of truth table.

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample immutable nodash"}
4.2 P \/ Q
|    TTT
|    TFF
|    FFT
|    FFF
```

Exercise: Construct the truth table for $(P \land Q) \land P$.

~~~{.SynChecker .Match system="thomasBolducAndZachTFL2019" submission="none"} 
4.3 (P /\ Q) /\ P
~~~

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample nodash autoAtom"}
4.4 (P /\ Q) /\ P
```

Exercise: Construct the truth table for $(P \lor Q) \land \neg P$.

~~~{.SynChecker .Match system="thomasBolducAndZachTFL2019" submission="none"} 
4.5 (P \/ Q) /\ ~P
~~~

```{.TruthTable .Simple system="thomasBolducAndZachTFL2019" submission="none" options="nocounterexample nodash autoAtom"}
4.6 (P \/ Q) /\ ~P
```

<p>[Previous: Translations](https://carnap.io/shared/srenee651@gmail.com/book-prop-trans.pandoc) &emsp; &emsp; &emsp; &emsp; [-Main Page-](https://carnap.io/shared/srenee651@gmail.com/Workbook.pandoc)  &emsp; &emsp; &emsp; &emsp;  [Next: Logical Truths and Falsehoods](https://carnap.io/shared/srenee651@gmail.com/book-prop-taf.pandoc) </p>
