---
--from markdown+simple_tables
---

# Propositional Logic

## Syntax

Very informally, a logic system has the following parts:

-   **A language (syntax):** what symbols are allowed, and how to combine them into correctly built statements.
-   **The meaning (semantics):** what are possible values of symbols (True, False), and how they combine to give values to statements.
-   **The reasoning (rules of inference):** rules for deriving new statements: constructing arguments and proofs

We will start off by learning Propositional Logic.

###Propositions

-   A sentence is a complete statement, formed according to the rules of grammar and communicating a meaningful thought. Propositional Logic (PL) only considers declarative statements, which affirm or deny something.
-   A proposition is either **True** or **False**, but **not both**. The area of logic deals with propositions is called the propositional logic.
-   A PL sentence has a unique truth value, which is either True (abbreviated by T) or False (abbreviated by F).

Some examples of propositions:

-   "Ice is colder than water."
-   "MUN is a university."
-   "$2+2=7$."
-   "Kitkat is playing."
-   "COMP 1002 requires a lot of studying."

But not "Hi!" or "what is x?" or "Open this book!"

When we say "proposition", we usually mean a *sentence stating a single fact*, rather than a "compound proposition" such as "Sky is blue and snow is white". These single fact propositions are also known as __atomic propositions__.

```{.QualitativeProblem .MultipleSelection options="check" submission="none"}
a Select all of the atomic propositions.
| * 5 < 7
| Click this option.
| * This question has only one correct answer.
| What if 5 > 7?
| * Rylo Ashmore is the Queen of France.
```

##Symbols

Propositional variables are represented as capital Letters such as A,B,C,P,Q,R. These are kind of similar to arithmetic variables, except instead of standing in for numbers, they stand for propositions and evaluate to True or False.

Connectives (Logical Operators) allow for us to build compound propositions. Recall connectives from our ordinary everyday language (because, meanwhile, not, and...). PL only considers truth functional connectives: ones in which the truth value of the compound sentence is uniquely determined by the truth values of the component sentences. The main connectives we'll consider are: and, or, not, if...then, and if.. and only if... These main connectives can be represented in various ways. For the connectives, these are represented symbolically as:

-   $\neg A$ means **not A**
-   $A \land B$ means **A and B**
-   $A \lor B$ means **A or B**
-   $A \to B$ means **if A then B**
-   $A \leftrightarrow B$ means **A if and only if B**

A sentence with one or more of these connectives is a compound sentence; otherwise it is an atomic sentence.

```{.QualitativeProblem .MultipleSelection options="check" submission="none"}
b Select all of the compound sentences.
| * 5 is less than or equal to 7.
| Click this option but not the next option.
| * If roses are red, then violets are not blue.
| How is 5 < 7 and 3 < 5?
| * Rylo Ashmore is not the Queen of France.
```

For the exercises in Carnap, you will have to enter sentences of PL into Carnap. You don't have to enter the actual symbols of PL but instead can use symbols found on your keyboard. Here's a list:

--------------------------------- -----------------------------
not $\lnot$                       `-`, `~`
and $\land$                       `/\`,  `&`
or $\lor$                         `\/`
if then $\to$                     `->`, `>`
if and only if $\leftrightarrow$  `<->`, `<>`
--------------------------------- -----------------------------


##
##Priority & Parse Trees

In arithmetic, you build formulas out of numbers, variables, and operations. In logic we build formulas out of propositions and connectives. Also, just like arithmetic operators, there is a priority associated with the connectives. Recall grade school math and being taught PEDMAS/BEDMAS. 

The formula $2\times 3+4$ is equal to $(2\times 3)+4$. 

PL has a similar priority for the connectives:

Priority Symbol                  
-------- --------------------------------
0         ( )                     
1         $\neg$                  
2         $\land$ $\lor$                  
3         $\to$ $\leftrightarrow$ 
-------- --------------------------------

To distinguish between the priority of $\land$ vs $\lor$, and $\to$ vs $\leftrightarrow$, parenthesis must be used. You should know that parentheses are evaluated first, then negations ($\neg$), then
conjunctions ($\land$)/disjunctions($\lor$), then biconditionals($\leftrightarrow$)/conditionals($\to$).

The formula $2\times 3+4$ is equal to $(2\times 3)+4$.
The formula can be represented as the parse diagram:

<img src="https://carnap.io/shared/srenee651@gmail.com/z_math_parse.jpg" alt="Arithmetic Parse Tree">


In PL, a parse diagram starts with a formula and splitting it up by the last operation (the main
connective) made into its components, and repeating the process until ending with the atoms on the bottom.

In the exercises below, type the main connective of the sentence, then hit return. If you pick the right connective, the system will show you the
sub-sentence(s) from which the sentence is constructed using the main logical operator you just entered. It may be a sentence letter, or itself constructed from simpler sentences. Enter the main connective of the highlighted (in red) subsentence, until only sentence
letters are left. When you have completely analyzed the sentence, the box will turn green and Carnap will put a checkmark next to it.

Example: Draw the parse tree for $\neg (P \lor Q)$.

~~~{.SynChecker .Match system="thomasBolducAndZachTFL2019" submission="none"} 
1 ~(P \/ Q)
~~~

In this example, the main connective was $\neg$.

Example: Draw the parse tree for $\neg P \to Q \land \neg R$.

~~~{.SynChecker .Match system="ZachTFL2019" submission="none"} 
2 ~P -> Q \/ ~R
~~~
In this example, the main connective was $\to$.

~~~{.SynChecker .Match system="ZachTFL2019" submission="none"} 
3 ~P -> Q \/ (~R <> ~~Q /\ P)
~~~

<p>&emsp; &emsp; &emsp; &emsp; [-Main Page-](https://carnap.io/shared/srenee651@gmail.com/Workbook.pandoc)  &emsp; &emsp; &emsp; &emsp;  [Next: Translations](https://carnap.io/shared/srenee651@gmail.com/book-prop-trans.pandoc) </p>
